1.SRP也称之为内聚性，定义为：一个类应该只有一个发生变化的原因

1.每一个职责都是一条需求变化的轴线，当需求发生变化时，该变化会反应为类的职责变化。如果
一个类承担了多于一个的职责，那么引起它变化的原因就会有多个。

2.为何把两个职责分配到单独类中？
   因为这样职责耦合在一起，一个职责变化会削弱或抑制这个类完成其他职责的能力。

3.把职责定义为"变化的原因"，如果能想到多于一个动机去改变类，类就有多个职责。当习惯于
用组的形式去考虑职责时，就很难发现类具有多个职责的情况。

4.职责何时被分开？
   这依赖于程序的变化方式，如果程序的变化会影响A函数的签名，那么应该被分开，因为
当调用B函数(B函数调用A函数)的类也许需要重新编译。如果程序的变化总是导致两个职责
同时变化，就不必分离，分离反而带来复杂性。将两个函数放到不同类中，再在同一个类中引用这
两个新类，虽然这个类耦合了不应耦合在一起耦合了。但只要把它设置成谁也不依赖它，只有
main函数依赖它即可

5.如果没有发生变化就去应用SRP原则是不明智的(其他原则也类似)

6.一种常见的违反SRP原则的情形
	Employee类包含了业务规则和持久化功能。这两个职责在多数情况下不该混合，业务规则
往往会频繁变化，而持久化方式不会频繁变化，并且变化的原因也是完全不同的

7、一个场景说明职责扩散：
①类T只负责一个职责P，这样设计是符合单一职责原则的。后来由于某种原因，也许是需求变更了，
需要将职责P细分为粒度更细的职责P1，P2，这时如果要使程序遵循单一职责原则，需要将类T也分
解为两个类T1和T2，分别负责P1、P2两个职责。但是在程序已经写好的情况下，这样做简直太费时
间了。所以，简单的修改类T，用它来负责两个职责是一个比较不错的选择，虽然这样做有悖于单一
职责原则。（这样做的风险在于职责扩散的不确定性，因为我们不会想到这个职责P，在未来可能会扩散
为P1，P2，P3，P4……Pn。所以记住，在职责扩散到我们无法控制的程度之前，立刻对代码进行重构。）	
②一个类描述动物呼吸这个场景：
class Animal{  
    public void breathe(String animal){  
        System.out.println(animal+"呼吸空气");  
    }  
}  
public class Client{  
    public static void main(String[] args){  
        Animal animal = new Animal();  
        animal.breathe("牛");  
        animal.breathe("羊");  
        animal.breathe("猪");  
    }  
}
③程序上线后，发现问题了，并不是所有的动物都呼吸空气的，比如鱼就是呼吸水的。修改时如果遵循单一
职责原则，需要将Animal类细分为陆生动物类Terrestrial，水生动物Aquatic，代码如下：
class Terrestrial{  
    public void breathe(String animal){  
        System.out.println(animal+"呼吸空气");  
    }  
}  
class Aquatic{  
    public void breathe(String animal){  
        System.out.println(animal+"呼吸水");  
    }  
}  
   
public class Client{  
    public static void main(String[] args){  
        Terrestrial terrestrial = new Terrestrial();  
        terrestrial.breathe("牛");  
        terrestrial.breathe("羊");  
        terrestrial.breathe("猪");  
           
        Aquatic aquatic = new Aquatic();  
        aquatic.breathe("鱼");  
    }  
}
④我们会发现如果这样修改花销是很大的，除了将原来的类分解之外，还需要修改客户端。而直接修改类
Animal来达成目的虽然违背了单一职责原则，但花销却小的多，代码如下：
class Animal{  
    public void breathe(String animal){  
        if("鱼".equals(animal)){  
            System.out.println(animal+"呼吸水");  
        }else{  
            System.out.println(animal+"呼吸空气");  
        }  
    }  
}  
   
public class Client{  
    public static void main(String[] args){  
        Animal animal = new Animal();  
        animal.breathe("牛");  
        animal.breathe("羊");  
        animal.breathe("猪");  
        animal.breathe("鱼");  
    }  
}
这种修改方式要简单的多。但是却存在着隐患：有一天需要将鱼分为呼吸淡水的鱼和呼吸海水的鱼，则又需要修
改Animal类的breathe方法，而对原有代码的修改会对调用“猪”“牛”“羊”等相关功能带来风险。这种修改方式直接在
代码级别上违背了单一职责原则。还有一种修改方式：
class Animal{  
    public void breathe(String animal){  
        System.out.println(animal+"呼吸空气");  
    }  
   
    public void breathe2(String animal){  
        System.out.println(animal+"呼吸水");  
    }  
}  
   
public class Client{  
    public static void main(String[] args){  
        Animal animal = new Animal();  
        animal.breathe("牛");  
        animal.breathe("羊");  
        animal.breathe("猪");  
        animal.breathe2("鱼");  
    }  
}
这样虽然也违背了单一职责原则，但在方法级别上却是符合单一职责原则的，因为它并没有动原来方法的代码。
这三种方式各有优缺点，需要根据实际情况来确定。我的原则是：只有逻辑足够简单，才可以在代码级别上违反
单一职责原则；只有类中方法数量足够少，才可以在方法级别上违反单一职责原则；