1.定义：软件实体、类、模块、函数等是可以扩展的，但是不能修改

2.解释：
	a.对扩展开放——可以改变模块的功能
	b.对更改关闭——扩展时，不必改动模块的源代码或二进制代码(指jar文件)
矛盾性：扩展行为通常的方式就是修改代码，不允许修改的模块常常只有固定的行为。
怎样才能不改动模块的代码而改变其行为——抽象。

3.抽象的使用：由于模块依赖于一个固定的抽象体，所以它对于更改可以是关闭的。同时，
通过这个抽象派生类，也可以扩展此模块的功能。

4.预测变化：找到变化的抽象，利用抽象进行封闭。
  a.无论模块多么的“封闭”，都会存在一些无法封闭的变化，设计人员对它设计的模块应该对哪种
  变化做出选择，找出最有可能发生变化的种类。
  b.找出变化的方法：等到变化发生时找到适合变化的封闭抽象，之后就能确保以后同类变化的隔离。
  c.最初编写代码，假设不会发生变化，但总希望提早了解变化，并进行抽象。
  d.如何刺激变化提早发生？①通过测试，编写一些使系统可测试的抽象②缩短开发周期③加入框架前，
  经常展示特性给用户④首先开发最终要的。

5.仅对程序中呈现出频繁变化的那部分做抽象，拒绝不成熟抽象和抽象本身一样重要。

  