1、定义：客户端不应该依赖它不需要的接口；一个类对另一个类的依赖应该建立在最小的接口上。

2、问题由来：类A通过接口I依赖类B，类C通过接口I依赖类D，如果接口I对于类A和类B来说不是
最小接口，则类B和类D必须去实现他们不需要的方法。即类B和类D有空方法

3、解决方案：将臃肿的接口I拆分为独立的几个接口，类A和类C分别与他们需要的接口建立依赖关系。
也就是采用接口隔离原则。

4、修改前		
											类B
				接口1					方法1
类A------>方法1<--------------	方法2
			   方法2					方法3
			   方法3					方法4	// 空方法   
			   方法4					方法5  // 空方法
类C------>方法5<---------------类D
											方法1
											方法2  //空方法
											方法3 // 空方法
											方法4
											方法5
修改后：					
								接口I2<------------|					
		---------------->方法2					   |------>类B
类A						  方法3					   |
		---------------->	接口I1<------------|
						  |--->方法1				   |
类C----------------|							  	   |------>类D
	--------------------->接口I3<-----------|
								方法4
								方法5
5、接口隔离原则的含义是：建立单一接口，不要建立庞大臃肿的接口，尽量细化接口，接口中的方法尽量少。
也就是说，我们要为各个类建立专用的接口，而不要试图去建立一个很庞大的接口供所有依赖它的类去调用。								
6、采用接口隔离原则对接口进行约束时，要注意以下几点：
接口尽量小，但是要有限度。对接口进行细化可以提高程序设计灵活性是不挣的事实，但是如果过小，则会造
成接口数量过多，使设计复杂化。所以一定要适度。为依赖接口的类定制服务，只暴露给调用的类它需要的方法，
它不需要的方法则隐藏起来。只有专注地为一个模块提供定制服务，才能建立最小的依赖关系。提高内聚，减少
对外交互。使接口用最少的方法去完成最多的事情。