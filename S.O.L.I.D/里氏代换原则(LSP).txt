1.定义：子类型必须能够替换掉他们的基类型。相反，如果不能替换掉基类型的
类型就不是该基类型的子类型，也可以看做是子类型的定义。
使用组合还是继承：不必拘泥于组合方式还是继承方式，当你要用继承关系时，你扪心自问一把:"我需要向上转型吗
如果答案是肯定的，则大胆用着，如果发现其实这个类没有那么通用不会遇到要向上转型的情景，则尽量用组合吧
当使用继承时，遵循里氏替换原则。类B继承类A时，除添加新的方法完成新增功能P2外，尽量不要重写父类A的方法，
也尽量不要重载父类A的方法。

继承包含这样一层含义：父类中凡是已经实现好的方法（相对于抽象方法而言），实际上是在设定一系列的规范和契约，
虽然它不强制要求所有的子类必须遵从这些契约，但是如果子类对这些非抽象方法任意修改，就会对整个继承体系造成
破坏。而里氏替换原则就是表达了这一层含义。

继承作为面向对象三大特性之一，在给程序设计带来巨大便利的同时，也带来了弊端。比如使用继承会给程序带来侵入性，
程序的可移植性降低，增加了对象间的耦合性，如果一个类被其他的类所继承，则当这个类需要修改时，必须考虑到所有
的子类，并且父类修改后，所有涉及到子类的功能都有可能会产生故障。

在实际编程中，我们常常会通过重写父类的方法来完成新的功能，这样写起来虽然简单，但是整个继承体系的可复用性会
比较差，特别是运用多态比较频繁时，程序运行出错的几率非常大。如果非要重写父类的方法，比较通用的做法是：原来
的父类和子类都继承一个更通俗的基类，原有的继承关系去掉，采用依赖、聚合，组合等关系代替。

2.违反LSP：对于LSP的违反常常会导致以明显的方式违反OCP的方式使用运行时
类型检查，这种方式的特征就是使用大量的if/else确定一个对象类型，以便于可以
选择针对该类型的正确行为。

3.有效性并非本质属性：一个模型，如果孤立的看，并不具有真正意义的有效性，模型
的有效性只能通过客户端对它的调用来体现。在考虑一个设计是否恰当时，不能完全孤立
地看解决方案，必须根据该设计的使用者所作出的假设来审视它。
eg:
//长方形
public class Rectangle {
	int heigth;
	int width;
}
//正方形
public class Square extends Rectangle {
	public void setWidth(int w) {
		heigth = w;
		width = w;
	}
	
	public void setHeight(int h) {
		heigth = h;
		width = h;
	}
}
假设有这个函数：
public Rectangle IncreaseHeight(Rectangle r)
{
    while(r.getHeight()<r.getWidth()))
    {
        r.setHeight(r.getHeight()++);
    }
    
    return r;
}
如果传递给IncreaseHeight的是一个Rectangle（长宽不同）的对象的话，没问题；
如果传递一个Square对象。。。谁都知道会是个什么结果！出现这个问题的原因就
是这个继承结构的设计违反了LSP原则：Square类对Height和Weight的处理和Rectangle
逻辑不同不同，Rectangle单独改变Widtht和Height，而Square必须同时改变Width和Height。
所以，Square和Rectangle之间的继承关系是不能成立的。可以增加一个抽象类Quadrangle，
定义四边形的公共方法，Square和Rectangle都从Quadrangle继承这些方法，同时可
以添加自己特有的方法：
						|-------------------------|
						|Quadrangle{abstract}|
						|+GetArea()				   |
						|+GetCircle()			   |
					    |------------------------|
		↑--extends---------↑	↑-extends-↑			
		↑													↑
Rectangle										Square	
+SetHeight()							+SetEdge()
+SetWidth()							+GetEdge()
+GetHeight()	
+GetWidth()							
	

4.例子中Square和Rectangle就是is-a关系，为什么会出错？因为is-a关系本质
上是就行为方式而言，因为方式是依赖于客户端调用的。

5.基于契约的设计(Design By Contract, DBC，遵循LSP的方法)
②DBC的使用：契约就是通过为每个方法设置前置条件和后置条件来指定的，一个
方法执行前，前置条件必须为真。执行后，后置条件必须也为真。
③上例中Rectangle的setWidth后置条件为：assert((width == w) && (heigth == old.heigth))
③派生类的前置和后置条件规则：
a.在派生类覆盖方法的过程中，只能使用相等或更弱的前置条件来替换原始前置条件，
  只能使用相等或更强的后置条件替换原始条件
b.上例中，Square的setWidth的后置条件比Rectangle的setWidth更弱，因为它不遵守
heigth==old.height约束。

6.一些简单的规则判断是否违反LSP：
①完成的功能少于其基类的派生类通常是不能替换掉LSP的
②派生类中出现退化函数(即用空实现覆盖基类函数的非空实现)
③派生类的方法中添加了其基类不会抛出的异常。

