/*
	 1.作用：包装一系列对象相互作用的方式，使得这些对象可以不必明显互相引用，从而降低耦合。
		 保证相互作用可以彼此独立的变化
	 2.一个深思熟虑的设计会把一个系统分解为一群相互协作的同事对象，然后给每一个对象独特的责任，
		 适当配置它们之间的协作。
	 3.调停者的createColleague方法在需要的时候将所有同事类实例化，并通过get方法去得这些实例化的同事类
	 4.colleagueChanged中的参数作用使调停者和具体的同事对象可以通信
	 5.观察者模式通过引入观察者对象和主题对象将通信分散化，而调停者则封装了对象的通信，从而集中在一个对象上。
		 前者由于分散，可以更容易复用
	 6.大型系统的事件处理机制不适合调停者
*/
public class Main {
	 public static void main(String[] args) {
		 ;
	 }
}