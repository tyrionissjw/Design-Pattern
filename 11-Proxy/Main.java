/*
	 1.作用:代理模式给某个对象提供一个代理对象，并由代理对象控制原对象的引用
	 2.代理对象(proxy)中的引用使用真实对象引用(RealSubject)而非接口(Subject)
	 3.代理对象负责在需要的时候创建(或删除)真实的主题对象，一般代理将客户调用
	    传递给真实对象前后都要执行某些操作(pref()等)
	 4.各种代理应用的优点和缺点:
	 ①.远程代理
		 优点:可以将网络的细节隐藏，使客户端不必考虑网络存在.代理对象在客户端，承担大量网络通信任务。
		 真实对象在服务器端。
		 缺点:客户可能没意识到启动了一个耗时的任务
	 ②.虚拟代理：代理在必要时才将被代理的对象加载，代理对加载过程优化，当耗时资源时可用
	 ③.权限保护代理：代理对象对用户权限检查，然后决定是否有权限调用真实对象。
	 5.当代理对象不知道被代理的对象时，而仅仅持有一个被代理对象的接口。这时代理对象无法自己创建被代理对象，
	 必须由客户端创建并且传入。这种做法灵活性比代理对象直接创建被代理对象更高
	 6.代理模式与装饰模式区别：
	 前者为所装饰对象增加功能，后者对对象的使用施加控制(即代理中的pref和postf不应该理解为增加功能)
	 7.代理模式的优点：	     
	职责清晰：真实的角色就是实现实际的业务逻辑，不用关心其他非本职责的事务，通过后期的代理完成一件事务，附带的结果就是变成简洁清晰。
    高扩展性：具体主题角色是随时都会发生变化的，只要它实现了接口，不管它如何变化，我们的代理类完全可以在不做任何修改的情况下使用。
    
    8、使用代理模式实现延迟加载的例子
     ①比如某个程序需要查询DB，在查询前，需要获得数据库连接。软件启动时，初始化该类，尝试
    获得数据库连接。当有大量类似操作时，所有初始化叠加，会使系统启动变慢。此时使用代理模式，
    封装数据库查询的初始化操作，当系统启动时，初始化这个代理类，而非真实的数据库查询类。
    ②在系统启动时，将消耗资源最多的方法使用代理模式分离，加快启动速度。在用户真正操作时，
    再由代理类单独加载数据库查询类，完成用户请求，实现延迟加载
    ③使用代理类的两个意义：第一，在时间轴上分散系统压力。第二，很多真实主题可能根本不使用，
    启动时就加载浪费资源。


*/
public class Main {
	 public static void main(String[] args) {
		 Subject proxy = new Proxy();
		 proxy.f();
	 }
}